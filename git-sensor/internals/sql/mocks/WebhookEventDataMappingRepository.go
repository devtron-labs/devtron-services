// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	sql "github.com/devtron-labs/git-sensor/internals/sql"
	mock "github.com/stretchr/testify/mock"
)

// WebhookEventDataMappingRepository is an autogenerated mock type for the WebhookEventDataMappingRepository type
type WebhookEventDataMappingRepository struct {
	mock.Mock
}

// GetCiPipelineMaterialWebhookDataMapping provides a mock function with given fields: ciPipelineMaterialId, webhookParsedDataId
func (_m *WebhookEventDataMappingRepository) GetCiPipelineMaterialWebhookDataMapping(ciPipelineMaterialId int, webhookParsedDataId int) (*sql.CiPipelineMaterialWebhookDataMapping, error) {
	ret := _m.Called(ciPipelineMaterialId, webhookParsedDataId)

	if len(ret) == 0 {
		panic("no return value specified for GetCiPipelineMaterialWebhookDataMapping")
	}

	var r0 *sql.CiPipelineMaterialWebhookDataMapping
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (*sql.CiPipelineMaterialWebhookDataMapping, error)); ok {
		return rf(ciPipelineMaterialId, webhookParsedDataId)
	}
	if rf, ok := ret.Get(0).(func(int, int) *sql.CiPipelineMaterialWebhookDataMapping); ok {
		r0 = rf(ciPipelineMaterialId, webhookParsedDataId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.CiPipelineMaterialWebhookDataMapping)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(ciPipelineMaterialId, webhookParsedDataId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMatchedCiPipelineMaterialWebhookDataMappingForPipelineMaterial provides a mock function with given fields: ciPipelineMaterialId
func (_m *WebhookEventDataMappingRepository) GetMatchedCiPipelineMaterialWebhookDataMappingForPipelineMaterial(ciPipelineMaterialId int) ([]*sql.CiPipelineMaterialWebhookDataMapping, error) {
	ret := _m.Called(ciPipelineMaterialId)

	if len(ret) == 0 {
		panic("no return value specified for GetMatchedCiPipelineMaterialWebhookDataMappingForPipelineMaterial")
	}

	var r0 []*sql.CiPipelineMaterialWebhookDataMapping
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]*sql.CiPipelineMaterialWebhookDataMapping, error)); ok {
		return rf(ciPipelineMaterialId)
	}
	if rf, ok := ret.Get(0).(func(int) []*sql.CiPipelineMaterialWebhookDataMapping); ok {
		r0 = rf(ciPipelineMaterialId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*sql.CiPipelineMaterialWebhookDataMapping)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(ciPipelineMaterialId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWebhookPayloadDataForPipelineMaterialId provides a mock function with given fields: ciPipelineMaterialId, limit, offset, eventTimeSortOrder
func (_m *WebhookEventDataMappingRepository) GetWebhookPayloadDataForPipelineMaterialId(ciPipelineMaterialId int, limit int, offset int, eventTimeSortOrder string) ([]*sql.CiPipelineMaterialWebhookDataMapping, error) {
	ret := _m.Called(ciPipelineMaterialId, limit, offset, eventTimeSortOrder)

	if len(ret) == 0 {
		panic("no return value specified for GetWebhookPayloadDataForPipelineMaterialId")
	}

	var r0 []*sql.CiPipelineMaterialWebhookDataMapping
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, int, string) ([]*sql.CiPipelineMaterialWebhookDataMapping, error)); ok {
		return rf(ciPipelineMaterialId, limit, offset, eventTimeSortOrder)
	}
	if rf, ok := ret.Get(0).(func(int, int, int, string) []*sql.CiPipelineMaterialWebhookDataMapping); ok {
		r0 = rf(ciPipelineMaterialId, limit, offset, eventTimeSortOrder)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*sql.CiPipelineMaterialWebhookDataMapping)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, int, string) error); ok {
		r1 = rf(ciPipelineMaterialId, limit, offset, eventTimeSortOrder)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWebhookPayloadFilterDataForPipelineMaterialId provides a mock function with given fields: ciPipelineMaterialId, webhookParsedDataId
func (_m *WebhookEventDataMappingRepository) GetWebhookPayloadFilterDataForPipelineMaterialId(ciPipelineMaterialId int, webhookParsedDataId int) (*sql.CiPipelineMaterialWebhookDataMapping, error) {
	ret := _m.Called(ciPipelineMaterialId, webhookParsedDataId)

	if len(ret) == 0 {
		panic("no return value specified for GetWebhookPayloadFilterDataForPipelineMaterialId")
	}

	var r0 *sql.CiPipelineMaterialWebhookDataMapping
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (*sql.CiPipelineMaterialWebhookDataMapping, error)); ok {
		return rf(ciPipelineMaterialId, webhookParsedDataId)
	}
	if rf, ok := ret.Get(0).(func(int, int) *sql.CiPipelineMaterialWebhookDataMapping); ok {
		r0 = rf(ciPipelineMaterialId, webhookParsedDataId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.CiPipelineMaterialWebhookDataMapping)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(ciPipelineMaterialId, webhookParsedDataId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InactivateWebhookDataMappingForPipelineMaterials provides a mock function with given fields: ciPipelineMaterialIds
func (_m *WebhookEventDataMappingRepository) InactivateWebhookDataMappingForPipelineMaterials(ciPipelineMaterialIds []int) error {
	ret := _m.Called(ciPipelineMaterialIds)

	if len(ret) == 0 {
		panic("no return value specified for InactivateWebhookDataMappingForPipelineMaterials")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]int) error); ok {
		r0 = rf(ciPipelineMaterialIds)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveCiPipelineMaterialWebhookDataMapping provides a mock function with given fields: ciPipelineMaterialWebhookDataMapping
func (_m *WebhookEventDataMappingRepository) SaveCiPipelineMaterialWebhookDataMapping(ciPipelineMaterialWebhookDataMapping *sql.CiPipelineMaterialWebhookDataMapping) error {
	ret := _m.Called(ciPipelineMaterialWebhookDataMapping)

	if len(ret) == 0 {
		panic("no return value specified for SaveCiPipelineMaterialWebhookDataMapping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.CiPipelineMaterialWebhookDataMapping) error); ok {
		r0 = rf(ciPipelineMaterialWebhookDataMapping)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCiPipelineMaterialWebhookDataMapping provides a mock function with given fields: ciPipelineMaterialWebhookDataMapping
func (_m *WebhookEventDataMappingRepository) UpdateCiPipelineMaterialWebhookDataMapping(ciPipelineMaterialWebhookDataMapping *sql.CiPipelineMaterialWebhookDataMapping) error {
	ret := _m.Called(ciPipelineMaterialWebhookDataMapping)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCiPipelineMaterialWebhookDataMapping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.CiPipelineMaterialWebhookDataMapping) error); ok {
		r0 = rf(ciPipelineMaterialWebhookDataMapping)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewWebhookEventDataMappingRepository creates a new instance of WebhookEventDataMappingRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWebhookEventDataMappingRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *WebhookEventDataMappingRepository {
	mock := &WebhookEventDataMappingRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
