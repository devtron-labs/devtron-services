// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	sql "github.com/devtron-labs/git-sensor/internals/sql"
	mock "github.com/stretchr/testify/mock"
)

// WebhookEventService is an autogenerated mock type for the WebhookEventService type
type WebhookEventService struct {
	mock.Mock
}

// GetAllGitHostWebhookEventByGitHostId provides a mock function with given fields: gitHostId, gitHostName
func (_m *WebhookEventService) GetAllGitHostWebhookEventByGitHostId(gitHostId int, gitHostName string) ([]*sql.GitHostWebhookEvent, error) {
	ret := _m.Called(gitHostId, gitHostName)

	if len(ret) == 0 {
		panic("no return value specified for GetAllGitHostWebhookEventByGitHostId")
	}

	var r0 []*sql.GitHostWebhookEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(int, string) ([]*sql.GitHostWebhookEvent, error)); ok {
		return rf(gitHostId, gitHostName)
	}
	if rf, ok := ret.Get(0).(func(int, string) []*sql.GitHostWebhookEvent); ok {
		r0 = rf(gitHostId, gitHostName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*sql.GitHostWebhookEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(gitHostId, gitHostName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllGitHostWebhookEventByGitHostName provides a mock function with given fields: gitHostName
func (_m *WebhookEventService) GetAllGitHostWebhookEventByGitHostName(gitHostName string) ([]*sql.GitHostWebhookEvent, error) {
	ret := _m.Called(gitHostName)

	if len(ret) == 0 {
		panic("no return value specified for GetAllGitHostWebhookEventByGitHostName")
	}

	var r0 []*sql.GitHostWebhookEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*sql.GitHostWebhookEvent, error)); ok {
		return rf(gitHostName)
	}
	if rf, ok := ret.Get(0).(func(string) []*sql.GitHostWebhookEvent); ok {
		r0 = rf(gitHostName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*sql.GitHostWebhookEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(gitHostName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWebhookParsedEventDataByEventIdAndUniqueId provides a mock function with given fields: eventId, uniqueId
func (_m *WebhookEventService) GetWebhookParsedEventDataByEventIdAndUniqueId(eventId int, uniqueId string) (*sql.WebhookEventParsedData, error) {
	ret := _m.Called(eventId, uniqueId)

	if len(ret) == 0 {
		panic("no return value specified for GetWebhookParsedEventDataByEventIdAndUniqueId")
	}

	var r0 *sql.WebhookEventParsedData
	var r1 error
	if rf, ok := ret.Get(0).(func(int, string) (*sql.WebhookEventParsedData, error)); ok {
		return rf(eventId, uniqueId)
	}
	if rf, ok := ret.Get(0).(func(int, string) *sql.WebhookEventParsedData); ok {
		r0 = rf(eventId, uniqueId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.WebhookEventParsedData)
		}
	}

	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(eventId, uniqueId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MatchCiTriggerConditionAndNotify provides a mock function with given fields: event, webhookEventParsedData, fullDataMap
func (_m *WebhookEventService) MatchCiTriggerConditionAndNotify(event *sql.GitHostWebhookEvent, webhookEventParsedData *sql.WebhookEventParsedData, fullDataMap map[string]string) error {
	ret := _m.Called(event, webhookEventParsedData, fullDataMap)

	if len(ret) == 0 {
		panic("no return value specified for MatchCiTriggerConditionAndNotify")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.GitHostWebhookEvent, *sql.WebhookEventParsedData, map[string]string) error); ok {
		r0 = rf(event, webhookEventParsedData, fullDataMap)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveWebhookParsedEventData provides a mock function with given fields: webhookEventParsedData
func (_m *WebhookEventService) SaveWebhookParsedEventData(webhookEventParsedData *sql.WebhookEventParsedData) error {
	ret := _m.Called(webhookEventParsedData)

	if len(ret) == 0 {
		panic("no return value specified for SaveWebhookParsedEventData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.WebhookEventParsedData) error); ok {
		r0 = rf(webhookEventParsedData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateWebhookParsedEventData provides a mock function with given fields: webhookEventParsedData
func (_m *WebhookEventService) UpdateWebhookParsedEventData(webhookEventParsedData *sql.WebhookEventParsedData) error {
	ret := _m.Called(webhookEventParsedData)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWebhookParsedEventData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.WebhookEventParsedData) error); ok {
		r0 = rf(webhookEventParsedData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewWebhookEventService creates a new instance of WebhookEventService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWebhookEventService(t interface {
	mock.TestingT
	Cleanup(func())
}) *WebhookEventService {
	mock := &WebhookEventService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
